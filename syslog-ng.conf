# Below is an abbreviated version of the syslog-ng.conf file I use. 
# In my production version I have a lot more trash filters and other filters to help redirect logs around.
# One prime example of this is if your networking gear has a specific domain name such as .net.domain.com 
# and it is not able to send to a port other than 514/udp, you can create filters for *.net.domain.com and 
# direct those logs to a specific destination.

####################################################
## Basic Global Options ###
####################################################
options {
        use_fqdn(yes);
        use_dns(yes);
        dns_cache_hosts(/etc/hosts);
        dns_cache(yes);
        keep_hostname(yes);
        long_hostnames(off);
        log_fifo_size(10240);
        flush_lines (1000);
        stats_freq (1000);
        log_fetch_limit(50);
        flush_lines(50);
        keep_timestamp(no);
};

####################################################
## Define sources
####################################################
source s_sys {
        file ("/proc/kmsg" log_prefix("kernel: "));
        unix-stream ("/dev/log");
        internal();
        # udp(ip(0.0.0.0) port(514));
};

# The load balancer wanted a TCP connection for checking so this port is listening purely for that.
source s_remote_lb_health_check {
        tcp(port(514));
};

source s_remote_logs_unix {
        udp(port(514) so_rcvbuf(67108864));
};

source s_remote_logs_networking {
        udp(port(1514) so_rcvbuf(67108864));
};

source s_remote_logs_security {
        udp(port(2514) so_rcvbuf(67108864));
};

source s_remote_logs_windows {
        udp(port(3514) so_rcvbuf(67108864));
};

####################################################
## Define destinations
####################################################

destination d_cons { file("/dev/console"); };
destination d_mesg { file("/var/log/messages"); };
destination d_auth { file("/var/log/secure"); };
destination d_mail { file("/var/log/maillog" sync(10)); };
destination d_spol { file("/var/log/spooler"); };
destination d_boot { file("/var/log/boot.log"); };
destination d_cron { file("/var/log/cron"); };
destination d_kern { file("/var/log/kern"); };
destination d_mlal { usertty("*"); };

destination d_hosts_unix {
   file("/mnt/logs/UNIX/$YEAR-$MONTH-$DAY-sys01.log"
   dir_owner(root) dir_group(root) dir_perm(0777) owner(root) group(root) perm(0664) create_dirs(yes));
};

destination d_hosts_networking {
   file("/mnt/logs/Networking/$YEAR-$MONTH-$DAY-sys01.log"
   dir_owner(root) dir_group(root) dir_perm(0777) owner(root) group(root) perm(0664) create_dirs(yes));
};

destination d_hosts_security {
   file("/mnt/logs/Security/$YEAR-$MONTH-$DAY-sys01.log"
   dir_owner(root) dir_group(root) dir_perm(0777) owner(root) group(root) perm(0664) create_dirs(yes));
};

destination d_hosts_windows {
   file("/mnt/logs/Windows/$YEAR-$MONTH-$DAY-sys01.log"
   dir_owner(root) dir_group(root) dir_perm(0777) owner(root) group(root) perm(0664) create_dirs(yes));
};

destination d_junk {
   file("/mnt/logs/junk/$YEAR-$MONTH-$DAY-sys01.log"
   dir_owner(root) dir_group(root) dir_perm(0777) owner(root) group(root) perm(0664) create_dirs(yes));
};

# Defining a remote server I also want to send a copy of the logs to.
destination d_remote_location {
       udp("192.168.1.10" port(1234) spoof_source(yes) );
};

####################################################
## Define filters
####################################################

### General trash filter ###
filter f_trash { (match("Please ignore me")
                or match("this specific string")
                or match("another string")
                or host("Server_Name") and match("all of these words")
                or host("server3.domain.com") and match("xxx") ); };

### Local Filters ###
filter f_kernel     { facility(kern); };
filter f_default    { level(info..emerg) and
                        not (facility(mail)
                        or facility(authpriv)
                        or facility(cron)); };
filter f_auth       { facility(auth, authpriv) and
                        not match("password changed in future"); };
filter f_mail       { facility(mail); };
filter f_emergency  { level(emerg); };
filter f_news       { facility(uucp) or
                        (facility(news)
                        and level(crit..emerg)); };
filter f_boot   { facility(local7); };
filter f_cron   { facility(cron); };

####################################################
## Define log statements
####################################################

### Default Logs ###
log { source(s_sys); filter(f_kernel); destination(d_kern); };
log { source(s_sys); filter(f_default); destination(d_mesg); };
log { source(s_sys); filter(f_auth); destination(d_auth); destination(d_hosts_unix); };
log { source(s_sys); filter(f_mail); destination(d_mail); };
log { source(s_sys); filter(f_emergency); destination(d_mlal); };
log { source(s_sys); filter(f_news); destination(d_spol); };
log { source(s_sys); filter(f_boot); destination(d_boot); };
log { source(s_sys); filter(f_cron); destination(d_cron); };

### Special filters to send logs to the correct location ###

### Run all trash filters first ###
log { source(s_remote_logs_unix); filter(f_trash); destination(d_junk); flags(final); };
log { source(s_remote_logs_networking); filter(f_trash); destination(d_junk); flags(final); };
log { source(s_remote_logs_security); filter(f_trash); destination(d_junk); flags(final); };
log { source(s_remote_logs_windows); filter(f_trash); destination(d_junk); flags(final); };

### Forward Logs to another server ###
log { source(s_remote_logs_unix); destination(d_remote_location); };
log { source(s_remote_logs_networking); destination(d_remote_location);  };
log { source(s_remote_logs_security); destination(d_remote_location);  };
log { source(s_remote_logs_windows); destination(d_remote_location); };

### Remote UNIX Logs ###
log { source(s_remote_logs_unix); destination(d_hosts_unix); };

### Remote Networking Logs ###
log { source(s_remote_logs_networking); destination(d_hosts_networking); };

### Remote Security Logs ###
log { source(s_remote_logs_security); destination(d_hosts_security); };

### Remote Windows Logs ###
log { source(s_remote_logs_windows); destination(d_hosts_windows); };

